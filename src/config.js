"use strict";

var path = require('path'),
    fs = require('fs');

exports.defaults = function() {
  return {
    sprite: {
      imageDir: "images/sprite",
      commonDir: "common",
      stylesheetDir: "stylesheets/sprite",
      isCSS: false,
      isStylus: true,
      options: {}
    }
  };
};

exports.placeholder = function () {
   var ph = "  # sprite:                     #\n" +
      "    # imageDir: \"images/sprite\" # Folder inside which are the images to be sprited. Every folder\n" +
      "                                # at the root of this folder will generate a single sprite. This\n" +
      "                                # path is relative to watch.sourceDir, which defaults to 'assets'\n" +
      "    # commonDir: \"common\"       # Folder inside which are images to be included in every sprite\n" +
      "                                # This is a string path relative to imageDir.\n" +
      "    # stylesheetDir: \"stylesheets/sprite\"  # Where to place the output stylesheets. Path is relative" +
      "                                # to watch.sourceDir" +
      "    # options: {}               # Pass through options for node-sprite-generator, the tool this\n" +
      "                                # module uses under the hood to do the heavy lifting. Details on\n" +
      "                                # the available options can be found here:\n" +
      "                                # https://github.com/selaux/node-sprite-generator#options\n" +
      "                                # mimosa-sprite provides the values for 'src', 'spritePath'\n" +
      "                                # and 'stylesheetPath' based on the imageDir folders structure.\n" +
      "                                # Other config options can be placed in this 'options' object.\n" +
      "                                # For more control, 'options' can be a function that takes the\n" +
      "                                # inferred config generated by mimosa-sprite. If you are\n" +
      "                                # generating 10 sprites, the options function will be called 10\n" +
      "                                # times for each sprite, giving you the change to make specific\n" +
      "                                # modifications to the node-sprite-generator config.\n\n";
  return ph;
};

exports.validate = function ( config, validators ) {
  var errors = [];
  if ( validators.ifExistsIsObject( errors, "sprite config", config.sprite ) ) {
    if ( validators.ifExistsIsString( errors, "sprite.imageDir", config.sprite.imageDir ) ) {
      config.sprite.imageDirFull = path.join( config.watch.sourceDir, config.sprite.imageDir );

      if ( validators.ifExistsIsString( errors, "sprite.commonDir", config.sprite.commonDir ) ) {
        config.sprite.commonDirFull = path.join( config.sprite.imageDirFull, config.sprite.commonDir );

        // If it doesnt exist, nuke it
        if (!fs.existsSync(config.sprite.commonDirFull)) {
          config.sprite.commonDirFull = null;
        }
      }
    }

    if ( validators.ifExistsIsString( errors, "sprite.stylesheetDir", config.sprite.stylesheetDir ) ) {
      config.sprite.stylesheetDirFull = path.join( config.watch.sourceDir, config.sprite.stylesheetDir );
    }

    var o = config.sprite.options;
    if ((typeof o === "object" && !Array.isArray(o)) || (typeof o === "function")) {
      if (o.stylesheet && o.stylesheet === "css") {
        config.sprite.isCSS = true;
        config.sprite.isStylus = false;
      }
    } else {
      errors.push("sprite.options must be an object or a function");
    }

  }

  return errors;
};